"""
Fluxo Bemobi - Sistema de Bot√µes Interativos
Fluxo completo para demonstra√ß√£o e valida√ß√£o da IA
"""

import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from sqlalchemy.orm import Session

from .whatsapp import whatsapp_service
from .ai_service import AIService

logger = logging.getLogger(__name__)

class FluxoBemobi:
    def __init__(self):
        self.ai_service = None
        
        # Estados do fluxo
        self.estados_fluxo = {
            "inicial": "inicial",
            "menu_principal": "menu_principal", 
            "verificacao": "verificacao",
            "resultado": "resultado",
            "suporte": "suporte"
        }
    
    def get_ai_service(self):
        """
        Obt√©m inst√¢ncia do servi√ßo de IA, inicializando se necess√°rio
        """
        if self.ai_service is None:
            try:
                # Carregar vari√°veis de ambiente antes de inicializar
                from dotenv import load_dotenv
                load_dotenv()
                
                self.ai_service = AIService()
                logger.info("Servi√ßo de IA inicializado no fluxo Bemobi")
            except Exception as e:
                logger.error(f"Erro ao inicializar servi√ßo de IA no fluxo: {e}")
                return None
        return self.ai_service
    
    async def iniciar_fluxo(self, db: Session, user, message_text: str = None):
        """
        Inicia o fluxo Bemobi com IA
        """
        try:
            logger.info(f"Iniciando fluxo Bemobi com IA para usu√°rio {user.id}")
            
            # Usar IA para gerar resposta personalizada
            ai_service = self.get_ai_service()
            if ai_service:
                # Gerar resposta da IA baseada na mensagem do usu√°rio
                resposta_ia = ai_service.obter_mensagem_inicial()
                
                # Enviar resposta da IA
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            else:
                # Fallback se IA n√£o estiver dispon√≠vel
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message="üè¶ **Bemobi - Sistema Financeiro Inteligente**\n\n"
                           "Ol√°! Sou a Grace, sua assistente financeira especializada.\n\n"
                           "Utilizo agentes de IA especializados para:\n"
                           "üîç Verificar autenticidade de cobran√ßas\n"
                           "üõ°Ô∏è Detectar fraudes e golpes\n"
                           "üìä Analisar documentos financeiros\n\n"
                           "Como posso ajudar voc√™ hoje?",
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar menu principal com IA
            await self.enviar_menu_principal_ia(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao iniciar fluxo Bemobi com IA: {e}")
            await self.enviar_erro(db, user, f"Erro ao iniciar fluxo: {str(e)}")
    
    async def enviar_menu_principal_ia(self, db: Session, user):
        """
        Envia menu principal com IA e bot√µes
        """
        try:
            logger.info(f"Enviando menu principal com IA para usu√°rio {user.id}")
            
            # Usar IA para gerar resposta do menu
            ai_service = self.get_ai_service()
            if ai_service:
                # Gerar resposta da IA para o menu
                resposta_menu = ai_service.obter_mensagem_ajuda()
                
                # Enviar resposta da IA
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_menu,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            else:
                # Fallback se IA n√£o estiver dispon√≠vel
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message="Escolha uma op√ß√£o:",
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_principais(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao enviar menu principal com IA: {e}")
            await self.enviar_erro(db, user, f"Erro ao enviar menu: {str(e)}")
    
    async def enviar_botoes_principais(self, db: Session, user):
        """
        Envia bot√µes principais decididos pela IA (m√°ximo 3)
        """
        try:
            # Usar n√∫mero permitido para testes
            phone_number = "5591981960045" if user.phone_number == "559181960045" else user.phone_number
            
            # Usar IA para decidir os bot√µes (com fallback robusto)
            ai_service = self.get_ai_service()
            buttons = None
            
            if ai_service:
                try:
                    # Pedir para a IA gerar os bot√µes (m√°ximo 3)
                    prompt_botoes = """
                    Voc√™ √© a Grace, assistente financeira da Bemobi. 
                    Crie exatamente 3 bot√µes para o menu principal do WhatsApp.
                    
                    IMPORTANTE: 
                    - M√°ximo 3 bot√µes (limite do WhatsApp)
                    - T√≠tulos curtos (m√°ximo 20 caracteres)
                    - IDs simples (sem espa√ßos)
                    - Foco em verifica√ß√£o financeira
                    
                    Responda APENAS no formato JSON:
                    {
                        "buttons": [
                            {"id": "id1", "title": "T√≠tulo 1"},
                            {"id": "id2", "title": "T√≠tulo 2"},
                            {"id": "id3", "title": "T√≠tulo 3"}
                        ]
                    }
                    """
                    
                    resposta_ia = ai_service.groq_client.chat.completions.create(
                        model="llama-3.1-8b-instant",
                        messages=[{"role": "user", "content": prompt_botoes}],
                        temperature=0.3
                    )
                    
                    # Extrair JSON da resposta
                    import json
                    import re
                    
                    json_match = re.search(r'\{.*\}', resposta_ia.choices[0].message.content, re.DOTALL)
                    if json_match:
                        buttons_data = json.loads(json_match.group())
                        buttons = buttons_data.get("buttons", [])
                        
                        # Garantir que temos exatamente 3 bot√µes v√°lidos
                        if len(buttons) == 3 and all("id" in b and "title" in b for b in buttons):
                            # Validar t√≠tulos (m√°ximo 20 caracteres)
                            for button in buttons:
                                if len(button["title"]) > 20:
                                    button["title"] = button["title"][:17] + "..."
                        else:
                            buttons = None
                    
                except Exception as e:
                    logger.warning(f"Erro ao gerar bot√µes com IA: {e}")
                    buttons = None
            
            # Fallback se IA n√£o funcionar ou gerar bot√µes inv√°lidos
            if not buttons:
                buttons = [
                    {"id": "demo_verificacao", "title": "Demo IA"},
                    {"id": "verificar_cobranca", "title": "Verificar"},
                    {"id": "sobre_agentes", "title": "Sobre Agentes"}
                ]
            
            logger.info(f"Enviando bot√µes decididos pela IA: {buttons}")
            
            try:
                await whatsapp_service.send_button_message(
                    phone_number=phone_number,
                    body_text="Selecione uma op√ß√£o:",
                    buttons=buttons,
                    log_to_db=False
                )
                logger.info("Bot√µes principais decididos pela IA enviados com sucesso!")
            except Exception as e:
                logger.error(f"Erro ao enviar bot√µes via WhatsApp API: {e}")
                # Fallback: enviar mensagem simples com op√ß√µes
                opcoes_texto = "\n".join([f"‚Ä¢ {button['title']}" for button in buttons])
                await whatsapp_service.send_message(
                    phone_number=phone_number,
                    message=f"Selecione uma op√ß√£o:\n\n{opcoes_texto}",
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
                logger.info("Fallback: mensagem de texto enviada com op√ß√µes")
            
        except Exception as e:
            logger.error(f"Erro ao enviar bot√µes principais: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await self.enviar_erro(db, user, f"Erro ao enviar bot√µes: {str(e)}")
    
    async def enviar_menu_principal(self, db: Session, user):
        """
        Envia menu principal com bot√µes de a√ß√£o do WhatsApp
        """
        try:
            logger.info(f"Enviando menu principal para usu√°rio {user.id}")
            
            # Usar n√∫mero permitido para testes
            phone_number = "5591981960045" if user.phone_number == "559181960045" else user.phone_number
            
            # Implementa√ß√£o direta e simples - WhatsApp limita a 3 bot√µes
            buttons = [
                {"id": "demo_verificacao", "title": "Demo IA"},
                {"id": "verificar_cobranca", "title": "Verificar"},
                {"id": "sobre_agentes", "title": "Sobre Agentes"}
            ]
            
            logger.info(f"Bot√µes definidos: {buttons}")
            logger.info(f"Enviando para n√∫mero: {phone_number}")
            
            await whatsapp_service.send_button_message(
                phone_number=phone_number,
                body_text="Escolha uma op√ß√£o:",
                buttons=buttons,
                log_to_db=False
            )
            
            logger.info("Menu principal enviado com sucesso!")
            
        except Exception as e:
            logger.error(f"Erro ao enviar menu principal: {e}")
            import traceback
            logger.error(traceback.format_exc())
            # Enviar mensagem de erro
            await whatsapp_service.send_message(
                phone_number=phone_number,
                message="‚ùå Erro ao carregar op√ß√µes. Tente novamente.",
                log_to_db=False
            )
    
    async def processar_botao(self, db: Session, user, button_id: str):
        """
        Processa clique em bot√£o do fluxo com IA
        """
        try:
            logger.info(f"Processando bot√£o {button_id} com IA para usu√°rio {user.id}")
            
            # Usar IA para gerar resposta baseada no bot√£o clicado
            ai_service = self.get_ai_service()
            if ai_service:
                # Gerar resposta da IA baseada no bot√£o
                resposta_ia = ai_service.obter_mensagem_ajuda()
                
                # Enviar resposta da IA
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            else:
                # Fallback se IA n√£o estiver dispon√≠vel
                await self.processar_botao_fallback(db, user, button_id)
            
            # Processar a√ß√£o espec√≠fica do bot√£o
            await self.processar_acao_botao(db, user, button_id)
                
        except Exception as e:
            logger.error(f"Erro ao processar bot√£o {button_id} com IA: {e}")
            await self.enviar_erro(db, user, f"Erro ao processar bot√£o: {str(e)}")
    
    async def processar_acao_botao(self, db: Session, user, button_id: str):
        """
        Processa a a√ß√£o espec√≠fica do bot√£o
        """
        try:
            if button_id == "demo_verificacao":
                await self.iniciar_demo_verificacao_ia(db, user)
            elif button_id == "verificar_cobranca":
                await self.iniciar_verificacao_real_ia(db, user)
            elif button_id == "sobre_agentes":
                await self.mostrar_sobre_agentes_ia(db, user)
            elif button_id == "voltar_menu":
                await self.enviar_menu_principal_ia(db, user)
            elif button_id == "teste_imagem":
                await self.iniciar_teste_imagem_ia(db, user)
            elif button_id == "teste_pix":
                await self.iniciar_teste_pix_ia(db, user)
            elif button_id == "ver_relatorio":
                await self.mostrar_relatorio_ia(db, user)
            else:
                await self.enviar_opcao_invalida_ia(db, user)
                
        except Exception as e:
            logger.error(f"Erro ao processar a√ß√£o do bot√£o {button_id}: {e}")
            await self.enviar_erro(db, user, f"Erro ao processar a√ß√£o: {str(e)}")
    
    async def processar_botao_fallback(self, db: Session, user, button_id: str):
        """
        Processamento de fallback quando IA n√£o est√° dispon√≠vel
        """
        try:
            if button_id == "demo_verificacao":
                await self.iniciar_demo_verificacao(db, user)
            elif button_id == "verificar_cobranca":
                await self.iniciar_verificacao_real(db, user)
            elif button_id == "sobre_agentes":
                await self.mostrar_sobre_agentes(db, user)
            elif button_id == "voltar_menu":
                await self.enviar_menu_principal(db, user)
            elif button_id == "teste_imagem":
                await self.iniciar_teste_imagem(db, user)
            elif button_id == "teste_pix":
                await self.iniciar_teste_pix(db, user)
            elif button_id == "ver_relatorio":
                await self.mostrar_relatorio(db, user)
            else:
                await self.enviar_opcao_invalida(db, user)
                
        except Exception as e:
            logger.error(f"Erro no fallback do bot√£o {button_id}: {e}")
            await self.enviar_erro(db, user, f"Erro no fallback: {str(e)}")
    
    # M√©todos com IA
    async def iniciar_demo_verificacao_ia(self, db: Session, user):
        """
        Inicia demonstra√ß√£o da verifica√ß√£o IA com IA
        """
        try:
            # Usar IA para gerar resposta
            ai_service = self.get_ai_service()
            if ai_service:
                resposta_ia = ai_service.obter_mensagem_ajuda()
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_demo(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao iniciar demo com IA: {e}")
            await self.enviar_erro(db, user, f"Erro na demo: {str(e)}")
    
    async def iniciar_verificacao_real_ia(self, db: Session, user):
        """
        Inicia verifica√ß√£o real com IA
        """
        try:
            # Usar IA para gerar resposta
            ai_service = self.get_ai_service()
            if ai_service:
                resposta_ia = ai_service.obter_mensagem_ajuda()
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_verificacao(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao iniciar verifica√ß√£o com IA: {e}")
            await self.enviar_erro(db, user, f"Erro na verifica√ß√£o: {str(e)}")
    
    async def mostrar_sobre_agentes_ia(self, db: Session, user):
        """
        Mostra informa√ß√µes sobre agentes com IA
        """
        try:
            # Usar IA para gerar resposta
            ai_service = self.get_ai_service()
            if ai_service:
                resposta_ia = ai_service.obter_mensagem_ajuda()
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_voltar(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao mostrar agentes com IA: {e}")
            await self.enviar_erro(db, user, f"Erro nos agentes: {str(e)}")
    
    async def iniciar_teste_imagem_ia(self, db: Session, user):
        """
        Inicia teste de imagem com IA
        """
        try:
            # Usar IA para gerar resposta
            ai_service = self.get_ai_service()
            if ai_service:
                resposta_ia = ai_service.obter_mensagem_ajuda()
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_voltar(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao iniciar teste de imagem com IA: {e}")
            await self.enviar_erro(db, user, f"Erro no teste: {str(e)}")
    
    async def iniciar_teste_pix_ia(self, db: Session, user):
        """
        Inicia teste de PIX com IA
        """
        try:
            # Usar IA para gerar resposta
            ai_service = self.get_ai_service()
            if ai_service:
                resposta_ia = ai_service.obter_mensagem_ajuda()
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_voltar(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao iniciar teste de PIX com IA: {e}")
            await self.enviar_erro(db, user, f"Erro no teste: {str(e)}")
    
    async def mostrar_relatorio_ia(self, db: Session, user):
        """
        Mostra relat√≥rio com IA
        """
        try:
            # Usar IA para gerar resposta
            ai_service = self.get_ai_service()
            if ai_service:
                resposta_ia = ai_service.obter_mensagem_ajuda()
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_voltar(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao mostrar relat√≥rio com IA: {e}")
            await self.enviar_erro(db, user, f"Erro no relat√≥rio: {str(e)}")
    
    async def enviar_opcao_invalida_ia(self, db: Session, user):
        """
        Envia mensagem de op√ß√£o inv√°lida com IA
        """
        try:
            # Usar IA para gerar resposta
            ai_service = self.get_ai_service()
            if ai_service:
                resposta_ia = ai_service.obter_mensagem_ajuda()
                await whatsapp_service.send_message(
                    phone_number=user.phone_number,
                    message=resposta_ia,
                    log_to_db=True,
                    user_id=user.id,
                    db=db
                )
            
            # Enviar bot√µes
            await self.enviar_botoes_voltar(db, user)
            
        except Exception as e:
            logger.error(f"Erro ao enviar op√ß√£o inv√°lida com IA: {e}")
            await self.enviar_erro(db, user, f"Erro na op√ß√£o: {str(e)}")
    
    # M√©todos auxiliares para bot√µes
    async def enviar_botoes_demo(self, db: Session, user):
        """
        Envia bot√µes para demo
        """
        try:
            phone_number = "5591981960045" if user.phone_number == "559181960045" else user.phone_number
            
            buttons = [
                {"id": "teste_imagem", "title": "Imagem"},
                {"id": "teste_pix", "title": "PIX"},
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=phone_number,
                body_text="Escolha o tipo de teste:",
                buttons=buttons,
                log_to_db=False
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar bot√µes demo: {e}")
    
    async def enviar_botoes_verificacao(self, db: Session, user):
        """
        Envia bot√µes para verifica√ß√£o
        """
        try:
            phone_number = "5591981960045" if user.phone_number == "559181960045" else user.phone_number
            
            buttons = [
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=phone_number,
                body_text="Envie seu documento ou clique para voltar:",
                buttons=buttons,
                log_to_db=False
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar bot√µes verifica√ß√£o: {e}")
    
    async def enviar_botoes_voltar(self, db: Session, user):
        """
        Envia bot√£o de voltar
        """
        try:
            phone_number = "5591981960045" if user.phone_number == "559181960045" else user.phone_number
            
            buttons = [
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=phone_number,
                body_text="Clique para voltar ao menu:",
                buttons=buttons,
                log_to_db=False
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar bot√£o voltar: {e}")
    
    async def iniciar_demo_verificacao(self, db: Session, user):
        """
        Inicia demonstra√ß√£o da verifica√ß√£o IA
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="üéØ **Demo - Verifica√ß√£o IA**\n\n"
                       "Vou demonstrar como nossos agentes especializados funcionam:\n\n"
                       "1Ô∏è‚É£ **Agente Leitor** - Extrai dados com OCR\n"
                       "2Ô∏è‚É£ **Agente Consultor** - Valida nos sistemas Bemobi\n"
                       "3Ô∏è‚É£ **Agente Detetive** - Detecta fraudes\n"
                       "4Ô∏è‚É£ **Agente Orquestrador** - Consolida resultado\n\n"
                       "Escolha o tipo de teste:",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Bot√µes para tipos de teste
            buttons = [
                {"id": "teste_imagem", "title": "Imagem"},
                {"id": "teste_pix", "title": "PIX"},
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=user.phone_number,
                body_text="Escolha o tipo de teste:",
                buttons=buttons,
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao iniciar demo: {e}")
            await self.enviar_erro(db, user, f"Erro ao iniciar demo: {str(e)}")
    
    async def iniciar_teste_imagem(self, db: Session, user):
        """
        Inicia teste com imagem simulada
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="üì∏ **Teste com Imagem**\n\n"
                       "Para testar com uma imagem real, envie uma foto de boleto.\n\n"
                       "Para demonstra√ß√£o, vou simular uma verifica√ß√£o:",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Simular verifica√ß√£o
            await self.simular_verificacao(db, user, "imagem")
            
        except Exception as e:
            logger.error(f"Erro no teste de imagem: {e}")
            await self.enviar_erro(db, user, f"Erro no teste: {str(e)}")
    
    async def iniciar_teste_pix(self, db: Session, user):
        """
        Inicia teste com dados PIX simulados
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="üìã **Teste com PIX**\n\n"
                       "Para testar com dados PIX reais, envie os dados.\n\n"
                       "Para demonstra√ß√£o, vou simular uma verifica√ß√£o:",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Simular verifica√ß√£o
            await self.simular_verificacao(db, user, "pix")
            
        except Exception as e:
            logger.error(f"Erro no teste PIX: {e}")
            await self.enviar_erro(db, user, f"Erro no teste: {str(e)}")
    
    async def simular_verificacao(self, db: Session, user, tipo: str):
        """
        Simula verifica√ß√£o completa para demonstra√ß√£o
        """
        try:
            # Dados simulados para demonstra√ß√£o
            dados_simulados = {
                "valor": "R$ 89,90",
                "beneficiario": "Bemobi Tecnologia",
                "vencimento": "15/12/2024",
                "status": "seguro"
            }
            
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="ü§ñ **Iniciando An√°lise com Agentes IA**\n\n"
                       "‚è≥ Agente Leitor: Extraindo dados...\n"
                       "‚è≥ Agente Consultor: Validando sistemas...\n"
                       "‚è≥ Agente Detetive: Detectando fraudes...\n"
                       "‚è≥ Agente Orquestrador: Consolidando...",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Simular tempo de processamento
            import asyncio
            await asyncio.sleep(2)
            
            # Enviar resultado simulado
            await self.enviar_resultado_simulado(db, user, dados_simulados)
            
        except Exception as e:
            logger.error(f"Erro na simula√ß√£o: {e}")
            await self.enviar_erro(db, user, f"Erro na simula√ß√£o: {str(e)}")
    
    async def enviar_resultado_simulado(self, db: Session, user, dados: Dict[str, Any]):
        """
        Envia resultado simulado da verifica√ß√£o
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="‚úÖ **Verifica√ß√£o Conclu√≠da**\n\n"
                       f"üìä **Resultado:** {dados['status'].upper()}\n"
                       f"üí∞ **Valor:** {dados['valor']}\n"
                       f"üè¢ **Benefici√°rio:** {dados['beneficiario']}\n"
                       f"üìÖ **Vencimento:** {dados['vencimento']}\n\n"
                       "**An√°lise dos Agentes:**\n"
                       "üîç Leitor: Dados extra√≠dos com sucesso\n"
                       "üè¶ Consultor: Valida√ß√£o nos sistemas OK\n"
                       "üõ°Ô∏è Detetive: Nenhuma fraude detectada\n"
                       "üìä Orquestrador: Confian√ßa 95%",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Bot√µes de a√ß√£o
            buttons = [
                {"id": "ver_relatorio", "title": "Relat√≥rio"},
                {"id": "nova_verificacao", "title": "Nova Verifica√ß√£o"},
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=user.phone_number,
                body_text="Escolha uma a√ß√£o:",
                buttons=buttons,
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar resultado: {e}")
            await self.enviar_erro(db, user, f"Erro ao enviar resultado: {str(e)}")
    
    async def iniciar_verificacao_real(self, db: Session, user):
        """
        Inicia verifica√ß√£o real com agentes
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="üîç **Verifica√ß√£o Real**\n\n"
                       "Para verificar uma cobran√ßa real, envie:\n"
                       "üì∏ Uma foto do boleto\n"
                       "üìã Os dados do PIX\n"
                       "üìÑ Um documento\n\n"
                       "Nossos agentes especializados ir√£o analisar automaticamente!",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Bot√£o para voltar
            buttons = [
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=user.phone_number,
                body_text="Envie seu documento ou clique para voltar:",
                buttons=buttons,
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao iniciar verifica√ß√£o real: {e}")
            await self.enviar_erro(db, user, f"Erro ao iniciar verifica√ß√£o: {str(e)}")
    
    async def mostrar_sobre_agentes(self, db: Session, user):
        """
        Mostra informa√ß√µes sobre os agentes
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="ü§ñ **Sobre os Agentes IA**\n\n"
                       "**üîç Agente Leitor**\n"
                       "‚Ä¢ Extrai dados usando OCR avan√ßado\n"
                       "‚Ä¢ Detecta caracter√≠sticas suspeitas\n"
                       "‚Ä¢ Analisa qualidade da imagem\n\n"
                       "**üè¶ Agente Consultor**\n"
                       "‚Ä¢ Valida nos sistemas Bemobi\n"
                       "‚Ä¢ Verifica benefici√°rios leg√≠timos\n"
                       "‚Ä¢ Confere valores de cobran√ßa\n\n"
                       "**üõ°Ô∏è Agente Detetive**\n"
                       "‚Ä¢ Detecta padr√µes de fraude\n"
                       "‚Ä¢ Consulta bases de golpes\n"
                       "‚Ä¢ Analisa reclama√ß√µes do mercado\n\n"
                       "**üìä Agente Orquestrador**\n"
                       "‚Ä¢ Consolida resultados\n"
                       "‚Ä¢ Calcula pontua√ß√£o de confian√ßa\n"
                       "‚Ä¢ Gera decis√£o final",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Bot√£o para voltar
            buttons = [
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=user.phone_number,
                body_text="Clique para voltar ao menu:",
                buttons=buttons,
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao mostrar sobre agentes: {e}")
            await self.enviar_erro(db, user, f"Erro ao mostrar informa√ß√µes: {str(e)}")
    
    async def mostrar_suporte(self, db: Session, user):
        """
        Mostra informa√ß√µes de suporte
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="üìû **Suporte Bemobi**\n\n"
                       "**Hor√°rio de Atendimento:**\n"
                       "Segunda a Sexta: 8h √†s 18h\n\n"
                       "**Canais de Contato:**\n"
                       "üìß Email: suporte@bemobi.com\n"
                       "üì± WhatsApp: (11) 99999-9999\n"
                       "üåê Site: www.bemobi.com\n\n"
                       "**Emerg√™ncias:**\n"
                       "Para casos de fraude, contate imediatamente!",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Bot√£o para voltar
            buttons = [
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=user.phone_number,
                body_text="Clique para voltar ao menu:",
                buttons=buttons,
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao mostrar suporte: {e}")
            await self.enviar_erro(db, user, f"Erro ao mostrar suporte: {str(e)}")
    
    async def mostrar_relatorio(self, db: Session, user):
        """
        Mostra relat√≥rio detalhado
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="üìä **Relat√≥rio Detalhado**\n\n"
                       "**An√°lise dos Agentes:**\n\n"
                       "üîç **Agente Leitor**\n"
                       "‚Ä¢ Status: ‚úÖ Sucesso\n"
                       "‚Ä¢ Dados extra√≠dos: 8/8 campos\n"
                       "‚Ä¢ Qualidade OCR: 95%\n\n"
                       "üè¶ **Agente Consultor**\n"
                       "‚Ä¢ Status: ‚úÖ Sucesso\n"
                       "‚Ä¢ Cliente validado: ‚úÖ\n"
                       "‚Ä¢ Benefici√°rio leg√≠timo: ‚úÖ\n"
                       "‚Ä¢ Valor conferido: ‚úÖ\n\n"
                       "üõ°Ô∏è **Agente Detetive**\n"
                       "‚Ä¢ Status: ‚úÖ Sucesso\n"
                       "‚Ä¢ Fraudes detectadas: 0\n"
                       "‚Ä¢ Padr√µes suspeitos: 0\n"
                       "‚Ä¢ Risco: Baixo (5%)\n\n"
                       "üìä **Agente Orquestrador**\n"
                       "‚Ä¢ Pontua√ß√£o final: 95%\n"
                       "‚Ä¢ Status: SEGURO\n"
                       "‚Ä¢ Recomenda√ß√£o: Pode pagar",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
            # Bot√µes de a√ß√£o
            buttons = [
                {"id": "nova_verificacao", "title": "Nova Verifica√ß√£o"},
                {"id": "voltar_menu", "title": "Voltar"}
            ]
            
            await whatsapp_service.send_button_message(
                phone_number=user.phone_number,
                body_text="Escolha uma a√ß√£o:",
                buttons=buttons,
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao mostrar relat√≥rio: {e}")
            await self.enviar_erro(db, user, f"Erro ao mostrar relat√≥rio: {str(e)}")
    
    async def enviar_opcao_invalida(self, db: Session, user):
        """
        Envia mensagem para op√ß√£o inv√°lida
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message="‚ùå **Op√ß√£o Inv√°lida**\n\n"
                       "Por favor, selecione uma das op√ß√µes dispon√≠veis nos bot√µes.",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar op√ß√£o inv√°lida: {e}")
    
    async def enviar_erro(self, db: Session, user, erro: str):
        """
        Envia mensagem de erro
        """
        try:
            await whatsapp_service.send_message(
                phone_number=user.phone_number,
                message=f"‚ùå **Erro**\n\n{erro}\n\nTente novamente ou entre em contato com o suporte.",
                log_to_db=True,
                user_id=user.id,
                db=db
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar mensagem de erro: {e}")
